complete -c eda -n "__fish_use_subcommand" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_use_subcommand" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_use_subcommand" -f -a "lg" -d 'Show all commits on the selected branch across all packages in the workspace that have that branch.'
complete -c eda -n "__fish_use_subcommand" -f -a "ls" -d 'List all the in-flight branches in your workspace. For each branch, show the packages that have that branch.'
complete -c eda -n "__fish_use_subcommand" -f -a "snapshot" -d 'Checks out the given source snapshot'
complete -c eda -n "__fish_use_subcommand" -f -a "co" -d 'Checks out the given branch where possible (other packages will be unchanged)'
complete -c eda -n "__fish_use_subcommand" -f -a "cr" -d 'Opens a code review for packages on the same branch.'
complete -c eda -n "__fish_use_subcommand" -f -a "build" -d 'Runs commands in build order for packages that have changed (tracked and untracked files) in the workspace.'
complete -c eda -n "__fish_use_subcommand" -f -a "rebase" -d 'For each of the packages in your workspace pull master from origin/master and rebase the current branch on the updated master.'
complete -c eda -n "__fish_use_subcommand" -f -a "merge" -d 'For each of the packages in your workspace merge the current branch to master.'
complete -c eda -n "__fish_use_subcommand" -f -a "fetch" -d 'For each of the packages in your workspace fetch all branches that exist in the origin.'
complete -c eda -n "__fish_use_subcommand" -f -a "pull" -d 'For each of the packages in your workspace pull down the latest changes for the branch that they are on.'
complete -c eda -n "__fish_use_subcommand" -f -a "push" -d 'For each of the packages in your workspace push the current master branch.'
complete -c eda -n "__fish_use_subcommand" -f -a "new" -d 'Creates a new branch for every dirty package in the workspace. You must specify either a branch name or a SIM ID (or both!).'
complete -c eda -n "__fish_use_subcommand" -f -a "rm" -d 'Deletes the given branch where possible.'
complete -c eda -n "__fish_use_subcommand" -f -a "completions" -d 'Generates completion scripts for your shell'
complete -c eda -n "__fish_use_subcommand" -f -a "create" -d 'Create a new workspace'
complete -c eda -n "__fish_use_subcommand" -f -a "package-prefs" -d 'Preferences for packages'
complete -c eda -n "__fish_use_subcommand" -f -a "script" -d 'Run commands in a shell (sh, bash, zsh, fish). You can use any combination of tools including this eda binary. Try \'eda script sh -c echo I am `eda --version`\' to get started.'
complete -c eda -n "__fish_use_subcommand" -f -a "run" -d 'Runs a command in all changed packages (that is packages either with new commits or uncommitted changes).'
complete -c eda -n "__fish_use_subcommand" -f -a "dirty-checkout" -d '\'script bash -c set -xmeu shopt -s extglob ; trap \'\\\'\'[[ $? -eq 0 ]] \\&\\& echo OK \\|\\| echo FAILED\'\\\'\' EXIT ; uuid=$(uuidgen) ; eda run --keep-going git stash push -m"Eda stashing $uuid" ; eda co {} ; eda run bash -c "git stash list -1 \\| grep $uuid \\&\\& git stash pop \\|\\| true"\''
complete -c eda -n "__fish_use_subcommand" -f -a "stream" -d '\'script bash -c set -meu shopt -s extglob l=$(mktemp -d) # sleep: Give tail time to print results not. Not all tail implementations have --pid. x=\'\\\'\'sleep 1; for j in $(jobs -p); do kill -9 -${j}; wait $j 2>/dev/null \\|\\| true; done; rm -r \'\\\'\'$l trap "$x" EXIT eda build -fs -l $l true \\&>/dev/null #make sure files are in place for tail eda build -q -l $l {} \\& { cd $l \\&\\& tail -F */std* 2>/dev/null ; } \\& fg 1 \''
complete -c eda -n "__fish_use_subcommand" -f -a "add" -d '\'run --dirty git add\''
complete -c eda -n "__fish_use_subcommand" -f -a "dirty-rebase" -d '\'script bash -c set -x -meu shopt -s extglob trap \'\\\'\'[[ $? -eq 0 ]] \\&\\& echo OK \\|\\| echo FAILED\'\\\'\' EXIT ; uuid=$(uuidgen) eda run git stash push -m"Eda stashing $uuid" eda rebase eda run bash -c "git stash list -1 \\| grep $uuid \\&\\& git stash pop \\|\\| true"\''
complete -c eda -n "__fish_use_subcommand" -f -a "dirty-pull" -d '\'script bash -c set -x -meu shopt -s extglob trap \'\\\'\'[[ $? -eq 0 ]] \\&\\& echo OK \\|\\| echo FAILED\'\\\'\' EXIT ; uuid=$(uuidgen) eda run git stash push -m"Eda stashing $uuid" eda pull eda run bash -c "git stash list -1 \\| grep $uuid \\&\\& git stash pop \\|\\| true"\''
complete -c eda -n "__fish_use_subcommand" -f -a "commit" -d '\'run --dirty git commit\''
complete -c eda -n "__fish_use_subcommand" -f -a "finish" -d '\'script bash -c set -x \\&\\& eda merge \\&\\& eda push \\&\\& eda rm --merged\''
complete -c eda -n "__fish_use_subcommand" -f -a "ll" -d '\'ls --long\''
complete -c eda -n "__fish_use_subcommand" -f -a "help" -d 'Prints this message or the help of the given subcommand(s)'
complete -c eda -n "__fish_seen_subcommand_from lg" -l pretty -d 'Pretty log format (see --pretty in git help log)'
complete -c eda -n "__fish_seen_subcommand_from lg" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from lg" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from ls" -s n -d 'Limit the number of branches to output.'
complete -c eda -n "__fish_seen_subcommand_from ls" -s l -l long -d 'Print vertically instead of horizontally'
complete -c eda -n "__fish_seen_subcommand_from ls" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from ls" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from snapshot" -l branch -d 'Create this branch for the snapshot'
complete -c eda -n "__fish_seen_subcommand_from snapshot" -l version-set -d 'Specify the version set'
complete -c eda -n "__fish_seen_subcommand_from snapshot" -l event-id -d 'Specify a revision of the version set'
complete -c eda -n "__fish_seen_subcommand_from snapshot" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from snapshot" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from co" -s c -l current-package -d 'Apply the change only to the current package'
complete -c eda -n "__fish_seen_subcommand_from co" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from co" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from cr" -l set-upstreams -d 'Set eda\'s master branch as the upstream branch before posting the CR.'
complete -c eda -n "__fish_seen_subcommand_from cr" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from cr" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from build" -s x -l skip-dependencies -d 'Skip building given packages even if they or their dependencies have changed.'
complete -c eda -n "__fish_seen_subcommand_from build" -s p -l platform -d 'The brazil package platform e.g. AL2012'
complete -c eda -n "__fish_seen_subcommand_from build" -s l -l log-dir -d 'Log dir for build output'
complete -c eda -n "__fish_seen_subcommand_from build" -l clean-first -d 'Clean the build folder before building.'
complete -c eda -n "__fish_seen_subcommand_from build" -s f -l force -d 'force building packages even if they or their dependencies haven\'t changed.'
complete -c eda -n "__fish_seen_subcommand_from build" -s t -l time -d 'Measure build duration'
complete -c eda -n "__fish_seen_subcommand_from build" -l ignore-dependencies -d 'Do not rebuild if dependencies change.'
complete -c eda -n "__fish_seen_subcommand_from build" -s s -l silent -d 'Show only output if build fails.'
complete -c eda -n "__fish_seen_subcommand_from build" -s q -l quiet -d 'Don\'t show output.'
complete -c eda -n "__fish_seen_subcommand_from build" -s c -l current-package -d 'Build only packages the current package depends on.'
complete -c eda -n "__fish_seen_subcommand_from build" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from build" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from rebase" -s c -l current-package -d 'Apply the change only to the current package'
complete -c eda -n "__fish_seen_subcommand_from rebase" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from rebase" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from merge" -s c -l current-package -d 'Apply the change only to the current package'
complete -c eda -n "__fish_seen_subcommand_from merge" -l ff-only -d 'Never create a merge commit.'
complete -c eda -n "__fish_seen_subcommand_from merge" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from merge" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from fetch" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from fetch" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from pull" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from pull" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from push" -s c -l current-package -d 'Apply the change only to the current package'
complete -c eda -n "__fish_seen_subcommand_from push" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from push" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from new" -s n -l name -d 'Specify the branch name'
complete -c eda -n "__fish_seen_subcommand_from new" -s s -l sim -d 'Specify the ID of a SIM to associate with the branch'
complete -c eda -n "__fish_seen_subcommand_from new" -s m -l message -d '[Optionally] commit all dirty files with the supplied message'
complete -c eda -n "__fish_seen_subcommand_from new" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from new" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from rm" -l merged -d 'Remove all merged branches'
complete -c eda -n "__fish_seen_subcommand_from rm" -l include-remote -d 'Clean remote branches with the same name.'
complete -c eda -n "__fish_seen_subcommand_from rm" -s f -l force -d 'Delete branches even if they are not fully merged yet.'
complete -c eda -n "__fish_seen_subcommand_from rm" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from rm" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from completions" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from completions" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from create" -l name -d 'Name of the workspace'
complete -c eda -n "__fish_seen_subcommand_from create" -s v -l vs -d 'Name of the version set'
complete -c eda -n "__fish_seen_subcommand_from create" -s p -l package -d 'Name of packages to checkout'
complete -c eda -n "__fish_seen_subcommand_from create" -l pipeline -d 'Checkout the packages from the given pipeline'
complete -c eda -n "__fish_seen_subcommand_from create" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from create" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from package-prefs" -l package -d 'Package to configure'
complete -c eda -n "__fish_seen_subcommand_from package-prefs" -l key -d 'Key to set' -r -f -a "master"
complete -c eda -n "__fish_seen_subcommand_from package-prefs" -l value -d 'value to set'
complete -c eda -n "__fish_seen_subcommand_from package-prefs" -l set -d 'Set a configuration'
complete -c eda -n "__fish_seen_subcommand_from package-prefs" -l get -d 'Get a configuration'
complete -c eda -n "__fish_seen_subcommand_from package-prefs" -l list -d 'List configurations'
complete -c eda -n "__fish_seen_subcommand_from package-prefs" -l current-package -d 'Use current active package'
complete -c eda -n "__fish_seen_subcommand_from package-prefs" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from package-prefs" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from script" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from script" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from run" -l branch -d 'Specify the branch to run for. Supports \'-\' for last branch.'
complete -c eda -n "__fish_seen_subcommand_from run" -l dirty -d 'Run the command for only dirty packages (packages with uncommitted changes or that are ahead).'
complete -c eda -n "__fish_seen_subcommand_from run" -l keep-going -d 'Don\'t stop if a command fails'
complete -c eda -n "__fish_seen_subcommand_from run" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from run" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from dirty-checkout" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from dirty-checkout" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from stream" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from stream" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from add" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from add" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from dirty-rebase" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from dirty-rebase" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from dirty-pull" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from dirty-pull" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from commit" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from commit" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from finish" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from finish" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from ll" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from ll" -s V -l version -d 'Prints version information'
complete -c eda -n "__fish_seen_subcommand_from help" -s h -l help -d 'Prints help information'
complete -c eda -n "__fish_seen_subcommand_from help" -s V -l version -d 'Prints version information'
